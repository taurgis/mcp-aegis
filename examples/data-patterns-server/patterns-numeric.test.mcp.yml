description: "Numeric Pattern Testing - Demonstrates Numeric Comparison Patterns"
tests:
  # This test file demonstrates the numeric patterns added to MCP Conductor
  # It uses a custom numeric server that returns actual numeric values for testing
  
  # NOTE: To run these tests:
  # node bin/conductor.js "examples/data-patterns-server/patterns-numeric.test.mcp.yml" --config "examples/data-patterns-server/server.config.json"
  
  # Test Greater Than patterns with real numeric data
  - it: "should validate request count is greater than 1000"
    request:
      jsonrpc: "2.0"
      id: "gt-test"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "api"
    expect:
      response:
        jsonrpc: "2.0"
        id: "gt-test"
        result:
          requestCount: "match:greaterThan:1000"     # 1250 > 1000 âœ“
          activeUsers: "match:greaterThan:500"       # 847 > 500 âœ“
          errorCount: "match:type:number"
          averageResponseTime: "match:type:number"
          uptime: "match:type:number"
          version: "match:type:number"

  # Test Less Than patterns with real numeric data
  - it: "should validate error count is less than 10"
    request:
      jsonrpc: "2.0"
      id: "lt-test"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "api"
    expect:
      response:
        jsonrpc: "2.0"
        id: "lt-test"
        result:
          errorCount: "match:lessThan:10"            # 3 < 10 âœ“
          averageResponseTime: "match:lessThan:200"  # 142 < 200 âœ“
          requestCount: "match:type:number"
          activeUsers: "match:type:number"
          uptime: "match:type:number"
          version: "match:type:number"

  # Test Between/Range patterns with real numeric data
  - it: "should validate metrics are within acceptable ranges"
    request:
      jsonrpc: "2.0"
      id: "range-test"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "performance"
    expect:
      response:
        jsonrpc: "2.0"
        id: "range-test"
        result:
          match:partial:
            cpuUsage: "match:between:0:100"        # 67 is between 0-100 âœ“
            memoryUsage: "match:range:50:90"       # 82 is in range 50-90 âœ“

  # Test Greater Than Or Equal patterns
  - it: "should validate minimum score requirements"
    request:
      jsonrpc: "2.0"
      id: "gte-test"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "validation"
    expect:
      response:
        jsonrpc: "2.0"
        id: "gte-test"
        result:
          match:partial:
            score: "match:greaterThanOrEqual:60"      # 87 >= 60 âœ“ (passing grade)
            successRate: "match:greaterThanOrEqual:90" # 95.5 >= 90 âœ“

  # Test Less Than Or Equal patterns
  - it: "should validate values don't exceed limits"
    request:
      jsonrpc: "2.0"
      id: "lte-test"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "validation"
    expect:
      response:
        jsonrpc: "2.0"
        id: "lte-test"
        result:
          match:partial:
            attempts: "match:lessThanOrEqual:5"     # 2 <= 5 âœ“
            priority: "match:lessThanOrEqual:10"    # 5 <= 10 âœ“

  # Test Decimal Numbers with E-commerce Data
  - it: "should validate decimal numbers and ratings"
    request:
      jsonrpc: "2.0"
      id: "decimal-test"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "ecommerce"
    expect:
      response:
        jsonrpc: "2.0"
        id: "decimal-test"
        result:
          match:partial:
            price: "match:between:10:100"           # 24.99 is between 10-100 âœ“
            rating: "match:range:1:5"               # 4.2 is in range 1-5 âœ“
            discountPercent: "match:lessThan:50"    # 12 < 50 âœ“

  # Test Negated Numeric Patterns
  - it: "should validate using negated numeric patterns"
    request:
      jsonrpc: "2.0"
      id: "negated-test"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "validation"
    expect:
      response:
        jsonrpc: "2.0"
        id: "negated-test"
        result:
          match:partial:
            score: "match:not:lessThan:60"          # 87 is NOT < 60 âœ“ (i.e., >= 60)
            attempts: "match:not:greaterThan:10"    # 2 is NOT > 10 âœ“ (i.e., <= 10)
            successRate: "match:not:between:0:50"   # 95.5 is NOT between 0-50 âœ“

  # ðŸ†• NEW PATTERNS: Test Equals and NotEquals patterns
  - it: "should validate exact numeric equality and inequality"
    request:
      jsonrpc: "2.0"
      id: "equals-test"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "ecommerce"
    expect:
      response:
        jsonrpc: "2.0"
        id: "equals-test"
        result:
          match:partial:
            productCount: "match:equals:42"         # Exact match: 42 = 42 âœ“
            categoryId: "match:notEquals:10"        # Not equal: 8 â‰  10 âœ“
            stock: "match:equals:15"                # Exact match: 15 = 15 âœ“

  # ðŸ†• NEW PATTERNS: Test Approximately pattern for floating point comparisons
  - it: "should validate floating point numbers within tolerance"
    request:
      jsonrpc: "2.0"
      id: "approximately-test"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "validation"
    expect:
      response:
        jsonrpc: "2.0"
        id: "approximately-test"
        result:
          match:partial:
            successRate: "match:approximately:95.5:0.1"  # 95.5 â‰ˆ 95.5 Â±0.1 âœ“
            version: "match:approximately:2:0.5"         # 2.1 â‰ˆ 2 Â±0.5 âœ“

  # ðŸ†• NEW PATTERNS: Test MultipleOf and DivisibleBy patterns
  - it: "should validate modular arithmetic patterns"
    request:
      jsonrpc: "2.0"
      id: "modulo-test"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "ecommerce"
    expect:
      response:
        jsonrpc: "2.0"
        id: "modulo-test"
        result:
          match:partial:
            productCount: "match:multipleOf:6"      # 42 is multiple of 6 (42/6 = 7) âœ“
            stock: "match:divisibleBy:5"            # 15 is divisible by 5 (15/5 = 3) âœ“
            categoryId: "match:multipleOf:2"        # 8 is multiple of 2 (8/2 = 4) âœ“

  # ðŸ†• NEW PATTERNS: Test DecimalPlaces pattern for currency validation
  - it: "should validate decimal places for currency formatting"
    request:
      jsonrpc: "2.0"
      id: "decimal-places-test"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "ecommerce"
    expect:
      response:
        jsonrpc: "2.0"
        id: "decimal-places-test"
        result:
          match:partial:
            price: "match:decimalPlaces:2"          # 24.99 has exactly 2 decimal places âœ“
            rating: "match:decimalPlaces:1"         # 4.2 has exactly 1 decimal place âœ“
            productCount: "match:decimalPlaces:0"   # 42 has 0 decimal places (whole number) âœ“

  # ðŸ†• ADVANCED: Test combinations of new patterns
  - it: "should demonstrate advanced pattern combinations"
    request:
      jsonrpc: "2.0"
      id: "advanced-test"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "performance"
    expect:
      response:
        jsonrpc: "2.0"
        id: "advanced-test"
        result:
          match:partial:
            # CPU usage should be multiple of 1 but not equal to 100
            cpuUsage: "match:multipleOf:1"          # 67 is whole number âœ“
            # Load average should be approximately 1.2 with some tolerance
            loadAverage: "match:approximately:1.2:0.1"  # 1.2 â‰ˆ 1.2 Â±0.1 âœ“
            # Memory usage should not equal CPU usage
            memoryUsage: "match:notEquals:67"       # 82 â‰  67 âœ“

  # ðŸ†• NEGATION: Test negated new patterns
  - it: "should validate negated new numeric patterns"
    request:
      jsonrpc: "2.0"
      id: "negated-new-test"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "validation"
    expect:
      response:
        jsonrpc: "2.0"
        id: "negated-new-test"
        result:
          match:partial:
            score: "match:not:equals:50"                    # 87 is NOT equal to 50 âœ“
            attempts: "match:not:multipleOf:5"              # 2 is NOT multiple of 5 âœ“
            successRate: "match:not:approximately:80:1"     # 95.5 is NOT approximately 80 Â±1 âœ“
            priority: "match:not:decimalPlaces:1"           # 5 does NOT have 1 decimal place âœ“

  # ðŸ†• REAL-WORLD: Business logic validation examples
  - it: "should demonstrate real-world business validation scenarios"
    request:
      jsonrpc: "2.0"
      id: "business-test"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "ecommerce"
    expect:
      response:
        jsonrpc: "2.0"
        id: "business-test"
        result:
          match:partial:
            # Price validation: Must be in currency format (2 decimal places)
            price: "match:decimalPlaces:2"          # Currency format: $24.99 âœ“
            # Category validation: Must be valid category ID (multiple of 2)
            categoryId: "match:multipleOf:2"        # Valid category: 8 = 2Ã—4 âœ“
            # Discount validation: Should be whole percent (no decimals)
            discountPercent: "match:decimalPlaces:0" # Whole percent: 12% âœ“

  # ðŸ†• REAL-WORLD: Stock validation scenarios
  - it: "should validate inventory management rules"
    request:
      jsonrpc: "2.0"
      id: "inventory-test"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "ecommerce"
    expect:
      response:
        jsonrpc: "2.0"
        id: "inventory-test"
        result:
          match:partial:
            # Stock validation: Must be non-zero and whole number
            stock: "match:notEquals:0"              # In stock: 15 â‰  0 âœ“
            productCount: "match:decimalPlaces:0"   # Whole number: 42 âœ“
