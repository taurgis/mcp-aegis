description: "Failing Cross-Field Tests - Demonstrates semantic cross-field validation failures (no structural field issues)"
tests:
  # These tests should fail to demonstrate MCP Aegis's cross-field validation error detection
  # Note: Uses data-patterns-server for realistic cross-field scenarios

  # Test 1: Cross-field comparison failure - fields don't match expected relationship
  - it: "should fail when startDate is incorrectly asserted > endDate"
    request:
      jsonrpc: "2.0"
      id: "cross-fail-1"
      method: "tools/call"
      params:
        name: "get_crossfield_data"
        arguments:
          scenario: "event"  # valid scenario; provides startDate & endDate
    expect:
      response:
        jsonrpc: "2.0"
        id: "cross-fail-1"
        result:
          match:crossField: "startDate > endDate"  # ❌ FAIL: startDate occurs before endDate

  # Test 2: Cross-field numeric comparison failure
  - it: "should fail when amount is incorrectly asserted > maxAmount"
    request:
      jsonrpc: "2.0"
      id: "cross-fail-2"
      method: "tools/call"
      params:
        name: "get_crossfield_data"
        arguments:
          scenario: "financial"  # valid scenario; amount < maxAmount
    expect:
      response:
        jsonrpc: "2.0"
        id: "cross-fail-2"
        result:
          match:crossField: "amount > maxAmount"  # ❌ FAIL: amount (250.75) < maxAmount (1000.00)

  # Test 3: Cross-field string length comparison failure
  - it: "should fail when age is incorrectly asserted > maxAge"
    request:
      jsonrpc: "2.0"
      id: "cross-fail-3"
      method: "tools/call"
      params:
        name: "get_crossfield_data"
        arguments:
          scenario: "user"  # provides age & maxAge
    expect:
      response:
        jsonrpc: "2.0"
        id: "cross-fail-3"
        result:
          match:crossField: "age > maxAge"  # ❌ FAIL: age (28) < maxAge (65)

  # Test 4: Cross-field equality failure
  - it: "should fail when discountPrice is incorrectly asserted = originalPrice"
    request:
      jsonrpc: "2.0"
      id: "cross-fail-4"
      method: "tools/call"
      params:
        name: "get_crossfield_data"
        arguments:
          scenario: "pricing"  # provides discountPrice & originalPrice
    expect:
      response:
        jsonrpc: "2.0"
        id: "cross-fail-4"
        result:
          match:crossField: "discountPrice = originalPrice"  # ❌ FAIL: 80 != 100

  # Test 5: Cross-field with non-existent fields
  - it: "should fail when currentStock is incorrectly asserted < minStock"
    request:
      jsonrpc: "2.0"
      id: "cross-fail-5"
      method: "tools/call"
      params:
        name: "get_crossfield_data"
        arguments:
          scenario: "inventory"  # provides currentStock & minStock
    expect:
      response:
        jsonrpc: "2.0"
        id: "cross-fail-5"
        result:
          match:crossField: "currentStock < minStock"  # ❌ FAIL: 250 < 50 is false

  # Test 6: Cross-field date range validation failure
  - it: "should fail when endDate is incorrectly asserted < startDate"
    request:
      jsonrpc: "2.0"
      id: "cross-fail-6"
      method: "tools/call"
      params:
        name: "get_crossfield_data"
        arguments:
          scenario: "event"  # provides startDate & endDate
    expect:
      response:
        jsonrpc: "2.0"
        id: "cross-fail-6"
        result:
          match:crossField: "endDate < startDate"  # ❌ FAIL: endDate occurs after startDate

  # Test 7: Cross-field array length comparison failure
  - it: "should fail when minParticipants is incorrectly asserted = maxParticipants"
    request:
      jsonrpc: "2.0"
      id: "cross-fail-7"
      method: "tools/call"
      params:
        name: "get_crossfield_data"
        arguments:
          scenario: "event"  # provides minParticipants & maxParticipants
    expect:
      response:
        jsonrpc: "2.0"
        id: "cross-fail-7"
        result:
          match:crossField: "minParticipants = maxParticipants"  # ❌ FAIL: 50 != 500

  # Test 8: Cross-field nested object comparison failure
  - it: "should fail when event.startTime is incorrectly asserted > event.endTime (nested)"
    request:
      jsonrpc: "2.0"
      id: "cross-fail-8"
      method: "tools/call"
      params:
        name: "get_crossfield_data"
        arguments:
          scenario: "nested_event"  # use nested tool & scenario
    expect:
      response:
        jsonrpc: "2.0"
        id: "cross-fail-8"
        result:
          match:crossField: "event.startTime > event.endTime"  # ❌ FAIL: startTime precedes endTime

  # Test 9: Cross-field type mismatch failure
  - it: "should fail when status is incorrectly asserted > currentParticipants (string vs number)"
    request:
      jsonrpc: "2.0"
      id: "cross-fail-9"
      method: "tools/call"
      params:
        name: "get_crossfield_data"
        arguments:
          scenario: "event"  # provides status & currentParticipants
    expect:
      response:
        jsonrpc: "2.0"
        id: "cross-fail-9"
        result:
          match:crossField: "status > currentParticipants"  # ❌ FAIL: string vs number comparison false

  # Test 10: Cross-field validation with wrong operator
  - it: "should fail when amount is incorrectly asserted < minAmount"
    request:
      jsonrpc: "2.0"
      id: "cross-fail-10"
      method: "tools/call"
      params:
        name: "get_crossfield_data"
        arguments:
          scenario: "financial"  # amount > minAmount; asserting < causes failure
    expect:
      response:
        jsonrpc: "2.0"
        id: "cross-fail-10"
        result:
          match:crossField: "amount < minAmount"  # ❌ FAIL: 250.75 < 10.00 is false

  # Test 11: Complex cross-field validation failure
  - it: "should fail when currentDiscount is incorrectly asserted > maxDiscount"
    request:
      jsonrpc: "2.0"
      id: "cross-fail-11"
      method: "tools/call"
      params:
        name: "get_crossfield_data"
        arguments:
          scenario: "pricing"  # provides currentDiscount & maxDiscount
    expect:
      response:
        jsonrpc: "2.0"
        id: "cross-fail-11"
        result:
          match:crossField: "currentDiscount > maxDiscount"  # ❌ FAIL: 20 > 30 false

  # Test 12: Cross-field with array element comparison failure
  - it: "should fail when availableStock is incorrectly asserted < reservedStock"
    request:
      jsonrpc: "2.0"
      id: "cross-fail-12"
      method: "tools/call"
      params:
        name: "get_crossfield_data"
        arguments:
          scenario: "inventory"  # provides availableStock & reservedStock
    expect:
      response:
        jsonrpc: "2.0"
        id: "cross-fail-12"
        result:
          match:crossField: "availableStock < reservedStock"  # ❌ FAIL: 200 < 25 false

  # Test 13: Multiple cross-field validation failures
  - it: "should fail with multiple semantic cross-field validation errors"
    request:
      jsonrpc: "2.0"
      id: "cross-fail-13"
      method: "tools/call"
      params:
        name: "get_crossfield_data"
        arguments:
          scenario: "event"  # provides startDate, endDate, minParticipants, maxParticipants
    expect:
      response:
        jsonrpc: "2.0"
        id: "cross-fail-13"
        result:
          match:crossField: "endDate < startDate"  # ❌ FAIL: endDate after startDate
          secondValidation:
            match:crossField: "minParticipants > maxParticipants"  # ❌ FAIL: 50 > 500 false

  # Test 14: Cross-field validation with malformed syntax
  - it: "should fail when discountPrice is incorrectly asserted > originalPrice"
    request:
      jsonrpc: "2.0"
      id: "cross-fail-14"
      method: "tools/call"
      params:
        name: "get_crossfield_data"
        arguments:
          scenario: "pricing"  # provides discountPrice & originalPrice
    expect:
      response:
        jsonrpc: "2.0"
        id: "cross-fail-14"
        result:
          match:crossField: "discountPrice > originalPrice"  # ❌ FAIL: 80 > 100 false

  # Test 15: Cross-field validation expecting wrong relationship
  - it: "should fail when age is incorrectly asserted < minAge"
    request:
      jsonrpc: "2.0"
      id: "cross-fail-15"
      method: "tools/call"
      params:
        name: "get_crossfield_data"
        arguments:
          scenario: "user"  # provides age & minAge
    expect:
      response:
        jsonrpc: "2.0"
        id: "cross-fail-15"
        result:
          match:crossField: "age < minAge"  # ❌ FAIL: 28 < 18 false
