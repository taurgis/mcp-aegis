description: "Failing Field Extraction Tests - Demonstrates extractField Pattern Failures"
tests:
  # These tests should fail to demonstrate MCP Conductor's field extraction error detection

  # Test 1: Valid extraction path, wrong expected value (value mismatch only)
  - it: "should fail when extracted tool name value is wrong"
    request:
      jsonrpc: "2.0"
      id: "extract-fail-1"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "extract-fail-1"
        result:
          match:extractField: "tools.*.name"  # ❌ FAIL: actual => ["read_file"]
          value: ["delete_file"]             # Value mismatch (no structural missing_field)

  # Test 2: Pattern mismatch (arrayContains) on existing extraction
  - it: "should fail when arrayContains pattern not satisfied"
    request:
      jsonrpc: "2.0"
      id: "extract-fail-2"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "extract-fail-2"
        result:
          match:extractField: "tools.*.name"
          value: "match:arrayContains:delete_file"  # ❌ FAIL: pattern not satisfied

  # Test 3: Valid path with failing regex pattern
  - it: "should fail when regex pattern doesn't match extracted names"
    request:
      jsonrpc: "2.0"
      id: "extract-fail-3"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "extract-fail-3"
        result:
          match:extractField: "tools.*.name"
          value: "match:regex:^write_file$"  # ❌ FAIL: actual is read_file

  # Test 4: Deep nested existing field with wrong expected value
  - it: "should fail when deep nested type value is wrong"
    request:
      jsonrpc: "2.0"
      id: "extract-fail-4"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "extract-fail-4"
        result:
          match:extractField: "tools.*.inputSchema.properties.path.type"  # Existing path => ["string"]
          value: ["number"]  # ❌ FAIL: value mismatch

  # Test 5: Valid content extraction with wrong scalar expected value
  - it: "should fail when extracted file content text is wrong"
    request:
      jsonrpc: "2.0"
      id: "extract-fail-5"
      method: "tools/call"
      params:
        name: "read_file"
        arguments:
          path: "../shared-test-data/hello.txt"
    expect:
      response:
        jsonrpc: "2.0"
        id: "extract-fail-5"
        result:
          match:extractField: "content.0.text"  # Existing index 0
          value: "Hello world!"  # ❌ FAIL: actual is "Hello, MCP Conductor!"

  # Test 6: Type pattern mismatch on extracted inputSchema objects
  - it: "should fail when inputSchema extracted value type pattern is wrong"
    request:
      jsonrpc: "2.0"
      id: "extract-fail-6"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "extract-fail-6"
        result:
          match:extractField: "tools.*.inputSchema"
          value: "match:type:string"  # ❌ FAIL: inputSchema is object, not string

  # Test 7: Pattern mismatch (startsWith) on scalar extraction
  - it: "should fail when startsWith pattern doesn't match"
    request:
      jsonrpc: "2.0"
      id: "extract-fail-7"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "extract-fail-7"
        result:
          match:extractField: "tools.0.name"  # Extract single scalar => ["read_file"] internally
          value: "match:startsWith:write_"   # ❌ FAIL: pattern mismatch

  # Test 8: ArrayContains mismatch retained (already pattern-based)
  - it: "should fail when extracted names don't contain required value"
    request:
      jsonrpc: "2.0"
      id: "extract-fail-8"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "extract-fail-8"
        result:
          match:extractField: "tools.*.name"
          value: "match:arrayContains:delete_tool"  # ❌ FAIL: extracted ["read_file"] doesn't contain "delete_tool"

  # Test 9: Array length pattern mismatch (no structural missing items expected list vs pattern)
  - it: "should fail when arrayLength pattern is wrong for content texts"
    request:
      jsonrpc: "2.0"
      id: "extract-fail-9"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "extract-fail-9"
        result:
          match:extractField: "tools.*.name"
          value: "match:arrayLength:2"  # ❌ FAIL: actual length is 1

  # Test 10: ArrayContains mismatch on file content extraction (pattern-based)
  - it: "should fail when content text array missing expected value"
    request:
      jsonrpc: "2.0"
      id: "extract-fail-10"
      method: "tools/call"
      params:
        name: "read_file"
        arguments:
          path: "../shared-test-data/hello.txt"
    expect:
      response:
        jsonrpc: "2.0"
        id: "extract-fail-10"
        result:
          match:extractField: "content.*.text"
          value: "match:arrayContains:Goodbye"  # ❌ FAIL: extracted ["Hello world!"] doesn't contain "Goodbye"

  # Test 11: endsWith pattern mismatch on valid scalar path
  - it: "should fail when endsWith pattern doesn't match"
    request:
      jsonrpc: "2.0"
      id: "extract-fail-11"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "extract-fail-11"
        result:
          match:extractField: "tools.0.name"
          value: "match:endsWith:_fileX"  # ❌ FAIL: actual ends with _file

  # Test 12: Multiple pattern issues (arrayLength + element type) using valid path
  - it: "should fail with multiple pattern mismatches on extracted names"
    request:
      jsonrpc: "2.0"
      id: "extract-fail-12"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "extract-fail-12"
        result:
          match:extractField: "tools.*.name"  # Extraction => ["read_file"]
          value: "match:arrayLength:5"       # ❌ FAIL: pattern mismatch (length)

  # Test 13: Nested type pattern mismatch retained (pattern-based)
  - it: "should fail when nested path type pattern is wrong"
    request:
      jsonrpc: "2.0"
      id: "extract-fail-13"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "extract-fail-13"
        result:
          match:extractField: "tools.0.inputSchema.properties.path.type"
          value: "match:type:number"  # ❌ FAIL: extracted "string" value, expecting number type validation
