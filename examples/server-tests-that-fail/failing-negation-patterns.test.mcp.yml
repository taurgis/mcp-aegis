description: "Failing Negation Pattern Tests - Clean Pattern-Only Negation Failures (no structural noise)"
tests:
  # These tests should fail ONLY because the negated pattern logically fails.
  # We intentionally suppress structural field validation using match:partial and match:arrayElements
  # so feedback focuses purely on negation semantics (not missing/extra fields).

  # Test 1: Negated type pattern failure - value IS the negated type
  - it: "should fail when value IS the type we're negating"
    request:
      jsonrpc: "2.0"
      id: "negate-fail-1"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "negate-fail-1"
        result:
          match:partial:
            tools: "match:not:type:array"  # ❌ pattern-only failure (tools actually IS array)

  # Test 2: Negated string contains failure - string DOES contain the value
  - it: "should fail when string DOES contain the negated substring"
    request:
      jsonrpc: "2.0"
      id: "negate-fail-2"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "negate-fail-2"
        result:
          match:partial:
            tools:
              match:arrayElements:
                match:partial:
                  name: "match:not:contains:read"  # ❌ pattern-only failure

  # Test 3: Negated startsWith failure - string DOES start with the value
  - it: "should fail when string DOES start with the negated prefix"
    request:
      jsonrpc: "2.0"
      id: "negate-fail-3"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "negate-fail-3"
        result:
          match:partial:
            tools:
              match:arrayElements:
                match:partial:
                  name: "match:not:startsWith:read"  # ❌ pattern-only failure

  # Test 4: Negated endsWith failure - string DOES end with the value
  - it: "should fail when string DOES end with the negated suffix"
    request:
      jsonrpc: "2.0"
      id: "negate-fail-4"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "negate-fail-4"
        result:
          match:partial:
            tools:
              match:arrayElements:
                match:partial:
                  name: "match:not:endsWith:file"  # ❌ pattern-only failure

  # Test 5: Negated regex failure - string DOES match the pattern
  - it: "should fail when string DOES match the negated regex"
    request:
      jsonrpc: "2.0"
      id: "negate-fail-5"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "negate-fail-5"
        result:
          match:partial:
            tools:
              match:arrayElements:
                match:partial:
                  name: "match:not:regex:^[a-z_]+$"  # ❌ pattern-only failure

  # Test 6: Negated array length failure - array DOES have the negated length
  - it: "should fail when array DOES have the negated length"
    request:
      jsonrpc: "2.0"
      id: "negate-fail-6"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "negate-fail-6"
        result:
          match:partial:
            tools: "match:not:arrayLength:1"  # ❌ pattern-only failure

  # Test 7: Negated array contains failure - array DOES contain the element
  - it: "should fail when array DOES contain the negated element"
    request:
      jsonrpc: "2.0"
      id: "negate-fail-7"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "negate-fail-7"
        result:
          match:partial:
            tools: "match:not:arrayContains:name:read_file"  # ❌ pattern-only failure

  # Test 8: Negated numeric pattern failure - value DOES meet the negated condition
  - it: "should fail when content array length DOES meet the negated numeric condition"
    request:
      jsonrpc: "2.0"
      id: "negate-fail-8"
      method: "tools/call"
      params:
        name: "read_file"
        arguments:
          path: "../shared-test-data/hello.txt"
    expect:
      response:
        jsonrpc: "2.0"
        id: "negate-fail-8"
        result:
          match:partial:
            content: "match:not:arrayLength:1"  # ❌ pattern-only failure (content array length IS 1)

  # Test 9: Negated date validation failure - date IS valid
  - it: "should fail when content DOES contain negated substring (case-insensitive)"
    request:
      jsonrpc: "2.0"
      id: "negate-fail-9"
      method: "tools/call"
      params:
        name: "read_file"
        arguments:
          path: "../shared-test-data/hello.txt"
    expect:
      response:
        jsonrpc: "2.0"
        id: "negate-fail-9"
        result:
          match:partial:
            content:
              match:arrayElements:
                match:partial:
                  text: "match:not:contains:Hello"  # ❌ pattern-only failure (exact 'Hello' appears)

  # Test 10: Negated exists pattern failure - field DOES exist
  - it: "should fail when field DOES exist but we're negating existence"
    request:
      jsonrpc: "2.0"
      id: "negate-fail-10"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "negate-fail-10"
        result:
          match:partial:
            tools: "match:not:exists"  # ❌ pattern-only failure

  # Test 11: Negated partial match failure - partial match DOES succeed
  - it: "should fail when partial match DOES succeed but we're negating it"
    request:
      jsonrpc: "2.0"
      id: "negate-fail-11"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "negate-fail-11"
        result:
          match:partial:
            tools:
              match:arrayElements:
                match:partial:
                  name: "match:not:contains:read_file"  # ❌ pattern-only failure (full name present)

  # Test 12: Double negation confusion failure
  - it: "should fail with confusing double negation"
    request:
      jsonrpc: "2.0"
      id: "negate-fail-12"
      method: "tools/call"
      params:
        name: "read_file"
        arguments:
          path: "../shared-test-data/hello.txt"
    expect:
      response:
        jsonrpc: "2.0"
        id: "negate-fail-12"
        result:
          match:partial:
            isError: "match:not:type:boolean"  # ❌ pattern-only failure (isError is boolean)

  # Test 13: Negated complex pattern failure
  - it: "should fail when complex pattern DOES match but we're negating"
    request:
      jsonrpc: "2.0"
      id: "negate-fail-13"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "negate-fail-13"
        result:
          match:partial:
            tools:
              match:arrayElements:
                match:partial:
                  name: "match:not:regex:read_file"  # ❌ pattern-only failure

  # Test 14: Negated date format failure - format DOES match
  - it: "should fail when content DOES end with negated suffix"
    request:
      jsonrpc: "2.0"
      id: "negate-fail-14"
      method: "tools/call"
      params:
        name: "read_file"
        arguments:
          path: "../shared-test-data/hello.txt"
    expect:
      response:
        jsonrpc: "2.0"
        id: "negate-fail-14"
        result:
          match:partial:
            content:
              match:arrayElements:
                match:partial:
                  text: "match:not:endsWith:!"  # ❌ pattern-only failure (text ends with !)

  # Test 15: Multiple negation failures
  - it: "should fail with multiple negation pattern errors"
    request:
      jsonrpc: "2.0"
      id: "negate-fail-15"
      method: "tools/call"
      params:
        name: "read_file"
        arguments:
          path: "../shared-test-data/hello.txt"
    expect:
      response:
        jsonrpc: "2.0"
        id: "negate-fail-15"
        result:
          match:partial:
            content: "match:not:type:array"    # ❌ pattern-only failure
            isError: "match:not:type:boolean"  # ❌ pattern-only failure
