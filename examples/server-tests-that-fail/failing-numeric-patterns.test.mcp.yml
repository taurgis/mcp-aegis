description: "Failing Numeric Pattern Tests - Demonstrates Numeric Validation Failures"
tests:
  # These tests should fail to demonstrate MCP Conductor's numeric pattern error detection
  # Note: Uses data-patterns-server for realistic numeric data

  # Test 1: Greater than failure
  - it: "should fail when value is not greater than expected"
    request:
      jsonrpc: "2.0"
      id: "numeric-fail-1"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "api"
    expect:
      response:
        jsonrpc: "2.0"
        id: "numeric-fail-1"
        result:
          errorCount: "match:greaterThan:100"  # ❌ FAIL: errorCount is 3, not > 100

  # Test 2: Less than failure
  - it: "should fail when value is not less than expected"
    request:
      jsonrpc: "2.0"
      id: "numeric-fail-2"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "api"
    expect:
      response:
        jsonrpc: "2.0"
        id: "numeric-fail-2"
        result:
          requestCount: "match:lessThan:100"  # ❌ FAIL: requestCount is 1250, not < 100

  # Test 3: Between range failure
  - it: "should fail when value is not in expected range"
    request:
      jsonrpc: "2.0"
      id: "numeric-fail-3"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "api"
    expect:
      response:
        jsonrpc: "2.0"
        id: "numeric-fail-3"
        result:
          activeUsers: "match:between:1000:2000"  # ❌ FAIL: activeUsers is 847, not between 1000-2000

  # Test 4: Exact equals failure
  - it: "should fail when value doesn't equal expected"
    request:
      jsonrpc: "2.0"
      id: "numeric-fail-4"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "api"
    expect:
      response:
        jsonrpc: "2.0"
        id: "numeric-fail-4"
        result:
          errorCount: "match:equals:50"  # ❌ FAIL: errorCount is 3, not 50

  # Test 5: Not equals failure (should be different but isn't)
  - it: "should fail when value equals what it shouldn't"
    request:
      jsonrpc: "2.0"
      id: "numeric-fail-5"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "api"
    expect:
      response:
        jsonrpc: "2.0"
        id: "numeric-fail-5"
        result:
          errorCount: "match:notEquals:3"  # ❌ FAIL: errorCount IS 3, should be different

  # Test 6: Approximately failure
  - it: "should fail when value is not approximately equal"
    request:
      jsonrpc: "2.0"
      id: "numeric-fail-6"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "api"
    expect:
      response:
        jsonrpc: "2.0"
        id: "numeric-fail-6"
        result:
          averageResponseTime: "match:approximately:200:5"  # ❌ FAIL: 142 is not approximately 200 ± 5

  # Test 7: Multiple of failure
  - it: "should fail when value is not multiple of expected"
    request:
      jsonrpc: "2.0"
      id: "numeric-fail-7"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "api"
    expect:
      response:
        jsonrpc: "2.0"
        id: "numeric-fail-7"
        result:
          requestCount: "match:multipleOf:100"  # ❌ FAIL: 1250 is not a multiple of 100 (it actually is, but let's test edge case)

  # Test 8: Divisible by failure
  - it: "should fail when value is not divisible by expected"
    request:
      jsonrpc: "2.0"
      id: "numeric-fail-8"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "api"
    expect:
      response:
        jsonrpc: "2.0"
        id: "numeric-fail-8"
        result:
          errorCount: "match:divisibleBy:2"  # ❌ FAIL: 3 is not divisible by 2

  # Test 9: Decimal places failure
  - it: "should fail when decimal places don't match"
    request:
      jsonrpc: "2.0"
      id: "numeric-fail-9"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "financial"
    expect:
      response:
        jsonrpc: "2.0"
        id: "numeric-fail-9"
        result:
          price: "match:decimalPlaces:3"  # ❌ FAIL: price has 2 decimal places, not 3

  # Test 10: Greater than or equal failure
  - it: "should fail when value is not greater than or equal"
    request:
      jsonrpc: "2.0"
      id: "numeric-fail-10"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "api"
    expect:
      response:
        jsonrpc: "2.0"
        id: "numeric-fail-10"
        result:
          errorCount: "match:greaterThanOrEqual:10"  # ❌ FAIL: errorCount is 3, not >= 10

  # Test 11: Less than or equal failure
  - it: "should fail when value is not less than or equal"
    request:
      jsonrpc: "2.0"
      id: "numeric-fail-11"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "api"
    expect:
      response:
        jsonrpc: "2.0"
        id: "numeric-fail-11"
        result:
          requestCount: "match:lessThanOrEqual:500"  # ❌ FAIL: requestCount is 1250, not <= 500

  # Test 12: Range pattern failure (alias for between)
  - it: "should fail when value is not in range"
    request:
      jsonrpc: "2.0"
      id: "numeric-fail-12"
      method: "tools/call"
      params:
        name: "get_numeric_data"
        arguments:
          dataset: "financial"
    expect:
      response:
        jsonrpc: "2.0"
        id: "numeric-fail-12"
        result:
          tax: "match:range:50:100"  # ❌ FAIL: tax is probably not in 50-100 range

  # Test 13: Wrong type for numeric patterns
  - it: "should fail when applying numeric pattern to non-numeric value"
    request:
      jsonrpc: "2.0"
      id: "numeric-fail-13"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "numeric-fail-13"
        result:
          tools:
            - name: "match:greaterThan:5"  # ❌ FAIL: name is string "read_file", not numeric
