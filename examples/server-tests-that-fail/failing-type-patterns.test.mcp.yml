description: "Failing Type Pattern Tests - Pure Type Validation Failures (structure aligned so only type/length/count patterns fail)"
tests:
  # NOTE: Each expected block mirrors the real server structure using match:partial so only the targeted field's pattern fails.
  # Server reference structures:
  # tools/list → result.tools[0] = { name: string, description: string, inputSchema: { type, properties: { path: { type: 'string' } }, required: ['path'] } }
  # tools/call(read_file) → result = { content: [ { type: 'text', text: 'Hello, MCP Conductor!' } ], isError: false }

  # Test 1: wrong type (expect string but isError is boolean)
  - it: "type mismatch: isError string vs boolean"
    request:
      jsonrpc: "2.0"
      id: "type-fail-1"
      method: "tools/call"
      params:
        name: "read_file"
        arguments:
          path: "../shared-test-data/hello.txt"
    expect:
      response:
        jsonrpc: "2.0"
        id: "type-fail-1"
        result:
          match:partial:
            content:
              - type: "text"
                text: "Hello, MCP Conductor!"
            isError: "match:type:string"

  # Test 2: result object but expect array type
  - it: "type mismatch: result array vs object"
    request:
      jsonrpc: "2.0"
      id: "type-fail-2"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "type-fail-2"
        result: "match:type:array"

  # Test 3: name should be string but expect number
  - it: "type mismatch: tool name number vs string"
    request:
      jsonrpc: "2.0"
      id: "type-fail-3"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "type-fail-3"
        result:
          match:partial:
            tools:
              - match:partial:
                  name: "match:type:number"
                  description: "Reads a file"
                  inputSchema:
                    type: "object"
                    properties:
                      path:
                        type: "string"
                    required:
                      - "path"

  # Test 4: content is array but expect object
  - it: "type mismatch: content object vs array"
    request:
      jsonrpc: "2.0"
      id: "type-fail-4"
      method: "tools/call"
      params:
        name: "read_file"
        arguments:
          path: "../shared-test-data/hello.txt"
    expect:
      response:
        jsonrpc: "2.0"
        id: "type-fail-4"
        result:
          match:partial:
            # Force unmistakable mismatch: expect string while actual is array
            content: "match:type:string"
            isError: false

  # Test 5: description is string but expect null
  - it: "type mismatch: description null vs string"
    request:
      jsonrpc: "2.0"
      id: "type-fail-5"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "type-fail-5"
        result:
          match:partial:
            tools:
              - match:partial:
                  name: "read_file"
                  description: "match:type:null"
                  inputSchema:
                    type: "object"
                    properties:
                      path:
                        type: "string"
                    required:
                      - "path"

  # Test 6: name is string but expect boolean
  - it: "type mismatch: name boolean vs string"
    request:
      jsonrpc: "2.0"
      id: "type-fail-6"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "type-fail-6"
        result:
          match:partial:
            tools:
              - match:partial:
                  name: "match:type:boolean"
                  description: "Reads a file"
                  inputSchema:
                    type: "object"
                    properties:
                      path:
                        type: "string"
                    required:
                      - "path"

  # Test 7: name length mismatch (expect 50, actual 9)
  - it: "length mismatch: name length 50 vs 9"
    request:
      jsonrpc: "2.0"
      id: "type-fail-7"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "type-fail-7"
        result:
          match:partial:
            tools:
              - match:partial:
                  name: "match:length:50"
                  description: "Reads a file"
                  inputSchema:
                    type: "object"
                    properties:
                      path:
                        type: "string"
                    required:
                      - "path"

  # Test 8: content array length mismatch (expect 5 elements, actual 1)
  - it: "array length mismatch: content length 5 vs 1"
    request:
      jsonrpc: "2.0"
      id: "type-fail-8"
      method: "tools/call"
      params:
        name: "read_file"
        arguments:
          path: "../shared-test-data/hello.txt"
    expect:
      response:
        jsonrpc: "2.0"
        id: "type-fail-8"
        result:
          match:partial:
            content: "match:length:5"
            isError: false

  # Test 9: pure type mismatch (inputSchema should be object but we expect string)
  - it: "type mismatch: inputSchema string vs object"
    request:
      jsonrpc: "2.0"
      id: "type-fail-9"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "type-fail-9"
        result:
          match:partial:
            tools:
              - match:partial:
                  name: "read_file"
                  description: "Reads a file"
                  inputSchema: "match:type:string"

  # Test 10: object property count mismatch on inputSchema (expect 20 vs 3)
  - it: "count mismatch: inputSchema property count 20 vs 3"
    request:
      jsonrpc: "2.0"
      id: "type-fail-10"
      method: "tools/list"
      params: {}
    expect:
      response:
        jsonrpc: "2.0"
        id: "type-fail-10"
        result:
          match:partial:
            tools:
              - match:partial:
                  name: "read_file"
                  description: "Reads a file"
                  inputSchema: "match:count:20"
