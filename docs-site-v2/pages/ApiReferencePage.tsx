import React from 'react';
import CodeBlock, { InlineCode } from '../components/CodeBlock';
import { H1, PageSubtitle, H2, H3 } from '../components/Typography';

const ApiReferencePage: React.FC = () => {
    return (
        <>
            <H1 id="api-reference">API Reference</H1>
            <PageSubtitle>Complete MCP Conductor Documentation</PageSubtitle>
            <p>Comprehensive reference for MCP Conductor's CLI commands and programmatic JavaScript/TypeScript testing API for Model Context Protocol servers.</p>

            <H2 id="cli-commands">CLI Commands</H2>
            <H3 id="init-command"><InlineCode>init</InlineCode> Command</H3>
            <p>Initialize MCP Conductor in a Node.js project.</p>
            <CodeBlock language="bash" code="npx mcp-conductor init" />
            <p><strong>What it does:</strong></p>
            <ul className="list-disc pl-6">
                <li>Creates <InlineCode>conductor.config.json</InlineCode> based on your <InlineCode>package.json</InlineCode></li>
                <li>Creates test directory structure (<InlineCode>test/mcp/</InlineCode> or <InlineCode>tests/mcp/</InlineCode>)</li>
                <li>Copies <InlineCode>AGENTS.md</InlineCode> guide to test directory</li>
            </ul>

            <H3 id="test-execution">Test Execution</H3>
            <p>Run YAML-based tests:</p>
            <CodeBlock language="bash" code={`
# Using npx (works with both test/ and tests/)
npx mcp-conductor "test*/mcp/**/*.test.mcp.yml"

# With custom config
npx mcp-conductor "test*.yml" --config "./custom-config.json"
            `} />
            <p><strong>Options:</strong></p>
            <ul className="list-disc pl-6">
                <li><InlineCode>--config, -c &lt;path&gt;</InlineCode>: Path to configuration file.</li>
                <li><InlineCode>--verbose, -v</InlineCode>: Display individual test results.</li>
                <li><InlineCode>--debug, -d</InlineCode>: Enable debug mode with detailed MCP communication logging.</li>
                <li><InlineCode>--timing, -t</InlineCode>: Show timing information.</li>
                <li><InlineCode>--json, -j</InlineCode>: Output results in JSON format.</li>
            </ul>

            <H2 id="main-entry-points">Main Entry Points (Programmatic)</H2>
            <H3 id="createClient"><InlineCode>createClient(config)</InlineCode></H3>
            <p>Creates a new MCPClient instance without connecting.</p>
            <CodeBlock language="javascript" code={`
import { createClient } from 'mcp-conductor';

// From configuration file (generated by init command)
const client = await createClient('./conductor.config.json');
            `} />
            
            <H3 id="connect"><InlineCode>connect(config)</InlineCode></H3>
            <p>Creates and automatically connects a client.</p>
            <CodeBlock language="javascript" code={`
import { connect } from 'mcp-conductor';

const client = await connect('./conductor.config.json');
// Client is immediately ready for use
            `} />

            <H2 id="mcpclient-class">MCPClient Class</H2>
            <p>Core methods for programmatic testing.</p>
            <ul className="list-disc pl-6">
                <li><InlineCode>async connect()</InlineCode></li>
                <li><InlineCode>async disconnect()</InlineCode></li>
                <li><InlineCode>async listTools()</InlineCode></li>
                <li><InlineCode>async callTool(name, arguments)</InlineCode></li>
                <li><InlineCode>async sendMessage(message)</InlineCode></li>
                <li><InlineCode>getStderr() / clearStderr()</InlineCode></li>
            </ul>
        </>
    );
};

export default ApiReferencePage;